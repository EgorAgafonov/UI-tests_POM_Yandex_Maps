{"name": "Увеличение/уменьшение размера изображения карты", "status": "failed", "statusDetails": {"message": "AssertionError: The page loaded more than 30 seconds!", "trace": "self = <tests.map_page_positive.TestMapPagePositive object at 0x0000016407095B40>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"18b008f8c0be739e6e5763e6a9801fd4\")>\nrandom_place = 'Москва, ст. метро Чистые пруды'\n\n    @pytest.mark.map_size\n    @allure.title(\"Увеличение/уменьшение размера изображения карты\")\n    @allure.testcase(\"https://yandex.ru/maps\", \"TC-YMPS-ZOOM-01\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(LabelType.LANGUAGE, \"Python\")\n    @allure.label(LabelType.FRAMEWORK, \"Pytest\", \"Selenium\")\n    @allure.label(\"Агафонов Е.А.\", \"владелец\")\n    @allure.link(\"https://yandex.ru/maps\", name=\"https://yandex.ru/maps\")\n    @allure.epic(\"Пользовательский интерфейс (позитивные тесты)\")\n    @allure.feature(\"Проверка работы элементов увеличения/уменьшения размера карты\")\n    def test_change_map_size_btn_click(self, driver, random_place=\"Москва, ст. метро Чистые пруды\"):\n        \"\"\"Позитивный тест проверки работы кнопок \"Приблизить\" \"Отдалить\", отвечающих за увеличение/уменьшение размера\n        карты. Валидация теста выполнена успешно если после каждого воздействия на указанные контроллеры,\n        изображение карты пропорционально увеличивается и/или уменьшается в соответствии с действиями пользователя.\n        Контроль теста определяется по сравнению значений масштаба карты в начальный момент теста, после уменьшения и\n        после увеличения размера карты.\"\"\"\n    \n        with allure.step(\"Шаг 1: Перейти на сайт https://yandex.ru/maps/ и дождаться полной загрузки всех элементов.\"):\n            page = MainPage(driver)\n>           page.wait_page_loaded()\n\nmap_page_positive.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.main_page.MainPage object at 0x00000164071EB640>, timeout = 30, check_js_complete = True, check_page_changes = False, check_images = False, wait_for_element = None, wait_for_xpath_to_disappear = '', sleep_time = 2\n\n    def wait_page_loaded(self, timeout=30, check_js_complete=True, check_page_changes=False, check_images=False,\n                         wait_for_element=None, wait_for_xpath_to_disappear='', sleep_time=2):\n    \n        \"\"\" Метод для реализации гибкой стратегии ожидания появления элементов страницы. Возможно задать следующее\n        количество аргументов(маркеров) для определения полной загрузки:\n        1) Проверка JavaScript статуса страницы;\n        2) Проверка изменений в исходном коде страницы;\n        3) Проверка загрузки изображений на странице (ВАЖНО: эта проверка отключена по умолчанию);\n        4) Проверка загрузки конкретного элемента страницы, ожидаемого пользователем.\"\"\"\n    \n        page_loaded = False\n        double_check = False\n        k = 0\n    \n        if sleep_time:\n            time.sleep(sleep_time)\n    \n        # Get source code of the page to track changes in HTML:\n        source = ''\n        try:\n            source = self.driver.page_source\n        except:\n            pass\n    \n        # Wait until page loaded (and scroll it, to make sure all objects will be loaded):\n        while not page_loaded:\n            time.sleep(0.5)\n            k += 1\n    \n            if check_js_complete:\n                # Scroll down and wait when page will be loaded:\n                try:\n                    self.driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')\n                    page_loaded = self.driver.execute_script(\"return document.readyState == 'complete';\")\n                except Exception as e:\n                    pass\n    \n            if page_loaded and check_page_changes:\n                # Check if the page source was changed\n                new_source = ''\n                try:\n                    new_source = self.driver.page_source\n                except:\n                    pass\n    \n                page_loaded = new_source == source\n                source = new_source\n    \n            # Wait when some element will disappear:\n            if page_loaded and wait_for_xpath_to_disappear:\n                bad_element = None\n    \n                try:\n                    bad_element = WebDriverWait(self.driver, 0.1).until(\n                        EC.presence_of_element_located((By.XPATH, wait_for_xpath_to_disappear))\n                    )\n                except:\n                    pass  # Ignore timeout errors\n    \n                page_loaded = not bad_element\n    \n            if page_loaded and wait_for_element:\n                try:\n                    page_loaded = WebDriverWait(self.driver, 0.1).until(\n                        EC.element_to_be_clickable(wait_for_element.locator)\n                    )\n                except:\n                    pass  # Ignore timeout errors\n    \n>           assert k < timeout, 'The page loaded more than {0} seconds!'.format(timeout)\nE           AssertionError: The page loaded more than 30 seconds!\n\n..\\pages\\base_page.py:181: AssertionError"}, "description": "Позитивный тест проверки работы кнопок \"Приблизить\" \"Отдалить\", отвечающих за увеличение/уменьшение размера\n        карты. Валидация теста выполнена успешно если после каждого воздействия на указанные контроллеры,\n        изображение карты пропорционально увеличивается и/или уменьшается в соответствии с действиями пользователя.\n        Контроль теста определяется по сравнению значений масштаба карты в начальный момент теста, после уменьшения и\n        после увеличения размера карты.", "steps": [{"name": "Шаг 1: Перейти на сайт https://yandex.ru/maps/ и дождаться полной загрузки всех элементов.", "status": "failed", "statusDetails": {"message": "AssertionError: The page loaded more than 30 seconds!\n", "trace": "  File \"C:\\Users\\agafo\\PycharmProjects\\YandexMaps\\tests\\map_page_positive.py\", line 109, in test_change_map_size_btn_click\n    page.wait_page_loaded()\n  File \"C:\\Users\\agafo\\PycharmProjects\\YandexMaps\\pages\\base_page.py\", line 181, in wait_page_loaded\n    assert k < timeout, 'The page loaded more than {0} seconds!'.format(timeout)\n"}, "start": 1709657591597, "stop": 1709657608963}], "start": 1709657591597, "stop": 1709657608964, "uuid": "58a71a24-aaa3-4d44-bf33-1cf30918f1eb", "historyId": "635884a0982d7e719cd4afa5802f6621", "testCaseId": "635884a0982d7e719cd4afa5802f6621", "fullName": "tests.map_page_positive.TestMapPagePositive#test_change_map_size_btn_click", "labels": [{"name": "language", "value": "Python"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Проверка работы элементов увеличения/уменьшения размера карты"}, {"name": "epic", "value": "Пользовательский интерфейс (позитивные тесты)"}, {"name": "Агафонов Е.А.", "value": "владелец"}, {"name": "framework", "value": "Pytest"}, {"name": "tag", "value": "map_size"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "map_page_positive"}, {"name": "subSuite", "value": "TestMapPagePositive"}, {"name": "host", "value": "DESKTOP-J32RPI2"}, {"name": "thread", "value": "22416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.map_page_positive"}], "links": [{"type": "link", "url": "https://yandex.ru/maps", "name": "https://yandex.ru/maps"}, {"type": "tms", "url": "https://yandex.ru/maps", "name": "TC-YMPS-ZOOM-01"}]}